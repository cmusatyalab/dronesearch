"""
===========================
Plots with different scales
===========================

Demonstrate how to do two plots on the same axes with different left and
right scales.

The trick is to use *two different axes* that share the same *x* axis.
You can use separate `matplotlib.ticker` formatters and locators as
desired since the two axes are independent.

Such axes are generated by calling the `Axes.twinx` method.  Likewise,
`Axes.twiny` is available to generate axes that share a *y* axis but
have different top and bottom scales.

The twinx and twiny methods are also exposed as pyplot functions.

"""

import numpy as np
import cPickle as pickle
import matplotlib as mpl
mpl.use("pgf")
pgf_with_rc_fonts = {
    "font.family": "serif",
    "font.serif": [],  # use latex default serif font
    "font.sans-serif": ["DejaVu Sans"],  # use a specific sans-serif font
    "font.size": 22
}
mpl.rcParams.update(pgf_with_rc_fonts)
# matplotlib.use('Agg')
import matplotlib.pyplot as plt


def get_cmap(n, name='hsv'):
    '''Returns a function that maps each index in 0, 1, ..., n-1 to a distinct 
    RGB color; the keyword argument name must be a standard mpl colormap name.'''
    return plt.cm.get_cmap(name, n)


with open('precision_recall.pkl') as f:
    dataset_to_precision_recall = pickle.load(f)

# cmap = get_cmap(len(dataset_to_precision_recall.keys()))
cmap = plt.cm.rainbow(
    np.linspace(0, 1, len(dataset_to_precision_recall.keys())))
color = iter(cmap)

aps = []
color_idx = 0
for dataset_name, stats in dataset_to_precision_recall.iteritems():
    precision = stats['precision']
    recall = stats['recall']
    average_precision = stats['average_precision']
    aps.append(average_precision)
    plt.plot(recall, precision, c=next(color), label=dataset_name)
    plt.axhline(
        y=min(precision), linestyle='dashed', color='grey', linewidth=0.5)
    color_idx += 1

plt.xlabel('Recall')
plt.ylabel('Precision')
plt.ylim([0.0, 1.05])
plt.xlim([0.0, 1.0])
plt.legend(loc='best', fontsize=13)
plt.title('Precision Recall curve: mAP={0:0.2f}'.format(np.mean(aps)))
plt.savefig('precision_recall.pdf', bbox_inches='tight')
