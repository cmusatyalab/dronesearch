"""
===========================
Plots with different scales
===========================

Demonstrate how to do two plots on the same axes with different left and
right scales.

The trick is to use *two different axes* that share the same *x* axis.
You can use separate `matplotlib.ticker` formatters and locators as
desired since the two axes are independent.

Such axes are generated by calling the `Axes.twinx` method.  Likewise,
`Axes.twiny` is available to generate axes that share a *y* axis but
have different top and bottom scales.

The twinx and twiny methods are also exposed as pyplot functions.

"""
from __future__ import absolute_import, division, print_function
import numpy as np
import cPickle as pickle
import matplotlib as mpl
mpl.use("pgf")
pgf_with_rc_fonts = {
    "font.family": "serif",
    "font.serif": [],  # use latex default serif font
    "font.sans-serif": ["DejaVu Sans"],  # use a specific sans-serif font
    "font.size": 22
}
mpl.rcParams.update(pgf_with_rc_fonts)
# matplotlib.use('Agg')
import matplotlib.pyplot as plt


def get_cmap(n, name='hsv'):
    '''Returns a function that maps each index in 0, 1, ..., n-1 to a distinct 
    RGB color; the keyword argument name must be a standard mpl colormap name.'''
    return plt.cm.get_cmap(name, n)


with open('track_to_fire_thresholds.pkl') as f:
    track_to_fire_thresholds = pickle.load(f)
with open('track_prediction_thresholds.pkl') as f:
    track_prediction_thresholds = pickle.load(f)

track_prediction_thresholds = np.array(track_prediction_thresholds)

track_to_min_fire_thresholds = {
    k: max(v)
    for k, v in track_to_fire_thresholds.items()
}
fire_thresholds = track_to_min_fire_thresholds.values()
fire_thresholds.append(0)
fire_thresholds = sorted(fire_thresholds, reverse=True)
event_recall = np.array(range(1,
                              len(fire_thresholds) + 1)) / len(fire_thresholds)
frame_num_percentage = [(track_prediction_thresholds >= threshold).sum() /
                        len(track_prediction_thresholds)
                        for threshold in fire_thresholds]

fig, ax1 = plt.subplots()
ax1.plot(fire_thresholds, event_recall, 'b-', fire_thresholds, event_recall,
         'bs')
ax1.set_xlabel('Cutoff Threshold')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Event Recall', color='b')
ax1.tick_params('y', colors='b')
ax1.set_xlim([0, 1.05])
ax1.set_ylim([0, 1.05])

ax2 = ax1.twinx()
ax2.plot(fire_thresholds, frame_num_percentage, 'r-', fire_thresholds,
         frame_num_percentage, 'ro')
ax2.set_ylabel('Percentage of Transmitted Frames', color='r')
ax2.tick_params('y', colors='r')
ax2.set_ylim([0, 1.05])

plt.gca().invert_xaxis()
plt.savefig('event_recall_vs_threshold.pdf', bbox_inches='tight')
